{
  "title": {
    "zh": "中文分类",
    "en": "Category"
  },
  "demos": [
    {
      "filename": "basic.js",
      "title": {
        "zh": "基础",
        "en": "Basic"
      },
      "description": {
        "zh": "最简单的表格示例。\n",
        "en": "The most sample usage.\n"
      },
      "order": 0,
      "screenshot": "",
      "height": 450,
      "category": "pro"
    },
    {
      "filename": "cascade.js",
      "title": {
        "zh": "级联",
        "en": "Cascade"
      },
      "description": {
        "zh": "头行场景，级联列表。子表格依赖于头表格参数查询。使用 DataSet children 属性关联数据集。\n",
        "en": "Header scene, cascading list. The sub-table depends on the head table parameter query. Use the DataSet children property to associate the dataset.\n"
      },
      "order": 1,
      "screenshot": "",
      "height": 780,
      "category": "pro"
    },
    {
      "filename": "pristine.js",
      "title": {
        "zh": "显示原始值",
        "en": "Pristine"
      },
      "description": {
        "zh": "使用 pristine 属性控制修改后仍显示原始值。\n",
        "en": "Pristine.\n"
      },
      "order": 2,
      "screenshot": "",
      "height": 454,
      "category": "pro"
    },
    {
      "filename": "inline-edit.js",
      "title": {
        "zh": "行内编辑",
        "en": "Inline Edit"
      },
      "description": {
        "zh": "editMode 为 inline 的单行编辑模式。\n",
        "en": "Inline Edit.\n"
      },
      "order": 3,
      "screenshot": "",
      "height": 454,
      "category": "pro"
    },
    {
      "filename": "custom-inline.js",
      "title": {
        "zh": "自定义行内编辑",
        "en": "Custom inline"
      },
      "description": {
        "zh": "自定义行内编辑，可仅提交当前行数据。通过 editor 自定义控制行内编辑。\n",
        "en": "Custom inline.\n"
      },
      "order": 4,
      "screenshot": "",
      "height": 425,
      "category": "pro"
    },
    {
      "filename": "tree.js",
      "title": {
        "zh": "树形数据",
        "en": "Tree Data"
      },
      "description": {
        "zh": "树形 Table 的功能展示。 - Tree Pro 组件需求 dataSet 数据形式采用打平的结构，通过 Id 和 parentId 字段声明来帮助组件内部构成树形处理。\n > 官网 mock 源数据 https://github.com/open-hand/choerodon-ui/blob/master/site/theme/mock/tree.js\n",
        "en": "Tree Data.\n"
      },
      "order": 5,
      "screenshot": "",
      "height": 680,
      "category": "pro"
    },
    {
      "filename": "load-tree-structure-data.js",
      "title": {
        "zh": "加载树形结构数据",
        "en": "Load Tree Structure Data"
      },
      "description": {
        "zh": "当接口查询的数据为树形结构时，可以使用此方案。\n",
        "en": "This scheme can be used when the data queried by the interface has a tree structure.\n"
      },
      "order": 6,
      "screenshot": "",
      "height": 680,
      "category": "pro"
    },
    {
      "filename": "tree-async.js",
      "title": {
        "zh": "树形数据异步懒加载",
        "en": "Lazy load of tree data asynchronously"
      },
      "description": {
        "zh": "点击展开图标时异步加载子数据。\n",
        "en": "Asynchronous lazy loading implementation, concerns: 1.icon rendering problem, 2.onExpand event trigger\n"
      },
      "order": 7,
      "screenshot": "",
      "height": 485,
      "category": "pro"
    },
    {
      "filename": "tree-async-paging.js",
      "title": {
        "zh": "树形数据异步分页",
        "en": "Tree data asynchronous paging"
      },
      "description": {
        "zh": "异步加载数据并对父亲节点进行分页处理，树形分页需要根节点 parentId 为 null。\n",
        "en": "Asynchronous lazy loading implementation, concerns: 1.icon rendering problem, 2.onExpand event trigger，parent paging\n"
      },
      "order": 8,
      "screenshot": "",
      "height": 485,
      "category": "pro"
    },
    {
      "filename": "column-group.js",
      "title": {
        "zh": "组合列",
        "en": "Grouped Columns"
      },
      "description": {
        "zh": "组合表头展示列信息。\n",
        "en": "Grouped Columns.\n"
      },
      "order": 9,
      "screenshot": "",
      "height": 540,
      "category": "pro"
    },
    {
      "filename": "advanced-bar.js",
      "title": {
        "zh": "高级搜索条",
        "en": "Advanced Search Bar"
      },
      "description": {
        "zh": "Table queryBar 设为 advancedBar 展示高级搜索条。\n",
        "en": "Advanced Search Bar.\n"
      },
      "order": 10,
      "screenshot": "",
      "height": 480,
      "ignores": ["theme1", "theme3", "theme5"],
      "category": "pro"
    },
    {
      "filename": "filterbar.js",
      "title": {
        "zh": "过滤条",
        "en": "Filter Bar"
      },
      "description": {
        "zh": "Table queryBar 设为 bar 展示过滤条。\n",
        "en": "Filter Bar.\n"
      },
      "order": 11,
      "screenshot": "",
      "height": 558,
      "ignores": ["theme1", "theme3", "theme5"],
      "category": "pro"
    },
    {
      "filename": "professional-bar.js",
      "title": {
        "zh": "专业搜索条",
        "en": "Professional Search Bar"
      },
      "description": {
        "zh": "Table queryBar 设为 professionalBar 展示专业搜索条。\n",
        "en": "Professional Search Bar.\n"
      },
      "order": 12,
      "screenshot": "",
      "height": 520,
      "ignores": ["theme5"],
      "category": "pro"
    },
    {
      "filename": "dyfilter-bar.js",
      "title": {
        "zh": "动态筛选条",
        "en": "Dynamic filter bar"
      },
      "description": {
        "zh": "Table queryBar 设为 filterBar，查询条件可动态配置筛选条，可单独纯前端使用，也可结合后端标准接口可实现筛选列表保存，参考 demo 代码注释。\n\n 更多详细功能教程：https://open.hand-china.com/choerodon-ui/zh/tutorials/dynamic-filter-bar-doc",
        "en": "There is no border to dynamically filter the bar, combined with the back-end standard interface to realize the preservation of the filter list.\n"
      },
      "order": 13,
      "screenshot": "",
      "height": 570,
      "category": "pro"
    },
    {
      "filename": "custom-bar.js",
      "title": {
        "zh": "自定义搜索条",
        "en": "Customize Search Bar"
      },
      "description": {
        "zh": "queryBar 采用钩子类型自定义搜索条，预置搜索条组件可导出配合使用。\n",
        "en": "Customize Search Bar.\n"
      },
      "order": 14,
      "screenshot": "",
      "height": 625,
      "category": "pro"
    },
    {
      "filename": "combo-bar.js",
      "title": {
        "zh": "组合搜索条",
        "en": "Combo Bar"
      },
      "description": {
        "zh": "可以使用 queryBar='comboBar' 并配合 queryBarProps 实现组合搜索条功能。\n",
        "en": "Achieved Combo Bar when use queryBar='comboBar' and queryBarProps.\n"
      },
      "order": 14,
      "screenshot": "",
      "height": 625,
      "category": "pro",
      "ignores": ["THEME_EMPTY", "theme1", "theme3", "theme5"]
    },
    {
      "filename": "query-dataset.js",
      "title": {
        "zh": "自定义查询 DataSet",
        "en": "Customize Query DataSet"
      },
      "description": {
        "zh": "自定义列表头部查询 DataSet，更灵活处理查询数据源逻辑。\n",
        "en": "Customize Query DataSet.\n"
      },
      "order": 15,
      "screenshot": "",
      "height": 485,
      "category": "pro"
    },
    {
      "filename": "spin.js",
      "title": {
        "zh": "Spin 受控",
        "en": "Spin"
      },
      "description": {
        "zh": "Table Spin 受控与自定义渲染展示。\n",
        "en": "Table Spin.\n"
      },
      "order": 16,
      "screenshot": "",
      "height": 500,
      "category": "pro"
    },
    {
      "filename": "mobx-action.js",
      "title": {
        "zh": "按钮受控",
        "en": "Button controlled"
      },
      "description": {
        "zh": "结合 mobx 处理一些按钮状态控制，避免在事件中使用 state 导致性能问题。\n",
        "en": "Combined with mobx to handle some button state control.\n"
      },
      "order": 17,
      "screenshot": "",
      "height": 485,
      "category": "pro"
    },
    {
      "filename": "dynamic-editor.js",
      "title": {
        "zh": "动态配置字段编辑器",
        "en": "Switch editor"
      },
      "description": {
        "zh": "动态切换字段编辑器，根据字段`基础`的值来改变字段`性别`编辑器为 lov 或 select。\n",
        "en": "Switch field editor to lov /select. based on other field values.\n"
      },
      "order": 18,
      "screenshot": "",
      "height": 590,
      "category": "pro"
    },
    {
      "filename": "autoHeight.js",
      "title": {
        "zh": "自适应高度",
        "en": "AutoHeight"
      },
      "description": {
        "zh": "通过 autoHeight 使得表格可以自适应容器高度，内容超出表内滚动，并且保持表头固定。(需要父级元素非仅由 Table 撑开；若存在筛选条，需要将筛选条的高度预留在内)。\n\nautoHeight 属性:\n\n| 类型 | 默认值 / 自定义 |\n| --- |  --- |\n| boolean | false |\n| boolean | true = { type: 'minHeight', diff: 80 } |\n| object | { type: 'minHeight' \\| 'maxHeight', diff: number(Table 自适应底部预留调整参数;单位默认 px) } |\n",
        "en": "AutoHeight.\n"
      },
      "order": 19,
      "screenshot": "",
      "height": 643,
      "category": "pro"
    },
    {
      "filename": "virtual.js",
      "title": {
        "zh": "虚拟滚动",
        "en": "Virtual Scroll"
      },
      "description": {
        "zh": "虚拟滚动，virtual \n\n 在大数据量并同时对性能需求很高的情况下建议开启。\n\n详细使用指南：https://open.hand-china.com/choerodon-ui/zh/tutorials/table-virtual",
        "en": "Virtual Scroll.\n"
      },
      "order": 20,
      "screenshot": "",
      "height": 488,
      "category": "pro"
    },
    {
      "filename": "useMouseBatchChoose.js",
      "title": {
        "zh": "鼠标批量选择",
        "en": "useMouseBatchChoose"
      },
      "description": {
        "zh": "在 rowbox 列上鼠标保持按下拖拉,对两个 rowbox 之间的行进行批量勾选。\n",
        "en": "Click the starting rowbox, move the mouse to the ending rowbox, and select the options between the two rowboxes.\n"
      },
      "order": 21,
      "screenshot": "",
      "height": 680,
      "ignores": ["theme1", "theme3", "theme4"],
      "category": "pro"
    },
    {
      "filename": "drag.js",
      "title": {
        "zh": "拖拽集成",
        "en": "Drag"
      },
      "description": {
        "zh": "拖拽集成，点击对应按钮查看不同类型拖拽示例。\n",
        "en": " Click on the corresponding button to see different types of drag and drop examples.\n"
      },
      "order": 22,
      "screenshot": "",
      "height": 535,
      "category": "pro"
    },
    {
      "filename": "customized.js",
      "title": {
        "zh": "用户个性化",
        "en": "Customized"
      },
      "description": {
        "zh": "支持对列的各项属性进行配置并个性化存储。全局配置 customizedSave | customizedLoad 个性化处理钩子，结合后端 API 进行存储或钩子内配置前端缓存。\n",
        "en": "Support the configuration and personalized storage of each attribute of the column.\n"
      },
      "order": 23,
      "screenshot": "",
      "height": 535,
      "category": "pro"
    },
    {
      "filename": "drag-render.js",
      "title": {
        "zh": "拖拽渲染示例",
        "en": "Drag Render"
      },
      "description": {
        "zh": "可以通过 rowDragRender 里面方法进行对于整体的拖拽控制，如 droppableProps，draggableProps 控制是否可以放入和拖动等。\n 更多查看 react-beautiful-dnd。\n在 1.5.7 版本扩展 draggableProps.isDragDisabled 属性支持回调函数：(record?: Record) => boolean，可以更灵活地对每一行进行拖拽控制。",
        "en": "You can use the rowDragRender method to control the overall drag and drop, such as droppableProps, draggableProps control whether you can drag and drop, etc., you can check react-beautiful-dnd.\nIn version 1.5.7, the draggableProps.isDragDisabled property was extended to support callback functions: (record?: Record) = > boolean, which allows more flexible drag control of each row."
      },
      "order": 24,
      "screenshot": "",
      "height": 500,
      "category": "pro"
    },
    {
      "filename": "summary-bars.js",
      "title": {
        "zh": "头部汇总条",
        "en": "Summary Bar"
      },
      "description": {
        "zh": "对字段进行头部汇总展示，buttonsLimit 默认为 3。\n",
        "en": "Summary Bar.\n"
      },
      "order": 25,
      "screenshot": "",
      "height": 450,
      "ignores": ["theme4"],
      "category": "pro"
    },
    {
      "filename": "multiple-line.js",
      "title": {
        "zh": "单列多行编辑展示",
        "en": "Multiple Line Editor"
      },
      "description": {
        "zh": "单元格内多字段分行编辑展示。\n",
        "en": "Multiple Line Editor\n"
      },
      "order": 26,
      "screenshot": "",
      "height": 570,
      "ignores": ["theme1", "theme3", "theme5"],
      "category": "pro"
    },
    {
      "filename": "aggregation.js",
      "title": {
        "zh": "聚合视图",
        "en": "Aggregation View"
      },
      "description": {
        "zh": "单元格内多字段聚合展示视图。\n",
        "en": "Aggregation View.\n"
      },
      "order": 27,
      "screenshot": "",
      "height": 800,
      "category": "pro"
    },
    {
      "filename": "group.js",
      "title": {
        "zh": "数据分组",
        "en": "Data grouping"
      },
      "description": {
        "zh": "数据分组。\n",
        "en": "Data grouping.\n"
      },
      "order": 28,
      "screenshot": "",
      "height": 450,
      "category": "pro"
    },
    {
      "filename": "advanced-group.js",
      "title": {
        "zh": "进阶数据分组",
        "en": "Advanced data grouping"
      },
      "description": {
        "zh": "更为复杂的数据分组场景。\n",
        "en": "More complex data grouping scenarios.\n"
      },
      "order": 29,
      "screenshot": "",
      "height": 680,
      "category": "pro"
    },
    {
      "filename": "async-count.js",
      "title": {
        "zh": "异步计数",
        "en": "Async count"
      },
      "description": {
        "zh": "查询时通知后端是否自动统计总数。\n当 autoCount 设为 false 时， 查询的参数默认会带上count=N的参数（通过 configure 设置默认 autoCount 属性时，参数为defaultCount=N，用于区分全局设置和自定义设置），参数名和值可以通过全局配置 generatePageQuery 设置\n当查询结果中 countKey 对应的值是 Y 时，会发起计数查询的请求，请求地址同 read 的地址， 请求参数会带上 onlyCount=Y 的参数，参数名和值可以通过全局配置 generatePageQuery 设置",
        "en": "Notify the backend whether to automatically count the total number when querying.\nWhen autoCount is set to false, the parameters of the query will carry the parameter of count=N by default. The parameter name and value can be set through the global configuration generatePageQuery\nWhen querying When the value corresponding to countKey in the result is Y, a count query request will be initiated. The request address is the same as the read address. The request parameter will include the parameter of onlyCount=Y. The parameter name and value can be set through the global configuration generatePageQuery"
      },
      "order": 30,
      "screenshot": "",
      "height": 450,
      "category": "pro"
    },
    {
      "filename": "combine-sort.js",
      "title": {
        "zh": "组合排序",
        "en": "CombineSort"
      },
      "description": {
        "zh": "DataSet 的 combineSort 属性值设置为 true 开启组合排序模式。\n给 Table 的列设置属性 sortable 来开启具体要排序的列。\n开启组合排序后，传到后端的排序参数字段 sort 为数组形式，数组值顺序为排序的优先级，例如：sort: ['age,desc', 'name,asc']",
        "en": "The combineSort property of DataSet was set to true to enable the combinatorial sorting mode.\nSet the sortable property to the column of the Table to enable the specific column to be sorted.\nAfter combination sort is enabled, the sorting parameter field sort sent to the back-end is in the form of an array, and the order of array values is the sorting priority, for example: sort: ['age,desc', 'name,asc']"
      },
      "order": 31,
      "screenshot": "",
      "height": 450,
      "category": "pro"
    },
    {
      "filename": "clipboard-paste.js",
      "title": {
        "zh": "数据复制&粘贴",
        "en": "Clipboard-Paste"
      },
      "description": {
        "zh": "实现 Table 与 Excel 表格之间的数据复制、粘贴功能。可编辑区域需要按下 shift 进行鼠标框选。",
        "en": "Data copy and paste between Table and Excel tables. Editable areas need to be selected by holding down shift."
      },
      "order": 32,
      "screenshot": "",
      "height": 806,
      "category": "pro"
    },
    {
      "filename": "multi-table-drag.js",
      "title": {
        "zh": "多表拖拽",
        "en": "MultiTableDrag"
      },
      "description": {
        "zh": "使用 react-beautiful-dnd 扩展多表之间的行拖拽能力。开启 rowDraggable 和 customDragDropContenxt 属性，同时使用 id 属性区分 Table 拖拽标识. 批量拖拽参考：https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/multi-drag.md",
        "en": "Extend row dragging between multiple tables using react-beautiful-dnd.Enable the rowDraggable and customDragDropContenxt attributes, and use the code attribute to differentiate between table drags. multi-drag：https://github.com/atlassian/react-beautiful-dnd/blob/master/docs/patterns/multi-drag.md"
      },
      "order": 33,
      "screenshot": "",
      "height": 400,
      "category": "pro"
    },
    {
      "filename": "sortable.js",
      "title": {
        "zh": "排序和筛选",
        "en": "Sorting and filtering"
      },
      "description": {
        "zh": "列配置 sortable 即开启排序，配置为函数类型则为前端排序，DataSet 配置 combineSort 开启组合排序，可进一步配置 Table 的 combineSortConfig 属性配置前端或后端排序。 \n 列配置 filter 开启列筛选，可进一步配置为函数自定义筛选逻辑。",
        "en": "When sortable is configured for columns, the sorting is enabled. When function type is configured, the front-end sorting is enabled. When DataSet is configured with combineSort, the combineSortConfig property of the Table can be further configured to configure the front-end or back-end sorting.  \n column Configuration filter Enables column filtering, which can be further configured to customize filtering logic for functions."
      },
      "order": 34,
      "screenshot": "",
      "height": 450,
      "category": "pro"
    },
    {
      "filename": "multifunction.js",
      "title": {
        "zh": "功能总和",
        "en": "All"
      },
      "description": {
        "zh": "极其复杂的案例，通过操作了解更多 Table 功能。\n",
        "en": "The most complex usage.\n"
      },
      "order": 99,
      "screenshot": "",
      "height": 680,
      "category": "pro"
    }
  ]
}
