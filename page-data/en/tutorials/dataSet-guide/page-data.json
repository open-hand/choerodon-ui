{"componentChunkName":"component---antv-gatsby-theme-antv-site-templates-tutorial-tsx","path":"/en/tutorials/dataSet-guide","result":{"data":{"site":{"siteMetadata":{"title":"Choerodon UI","githubUrl":"https://github.com/open-hand/choerodon-ui","tutorials":[]},"pathPrefix":"/c7n-ui"},"markdownRemark":{"html":"<p>DataSet can be understood as a data warehouse that stores data and some behaviors, and the remaining components can be understood as containers that display behaviors based on data.</p>\n<p>The following are the core concepts involved in DataSet. Understanding the core objects and their previous relationships will help you better use the Pigtooth component, quickly start development, and improve development efficiency.</p>\n<h1 id=\"dataset\" style=\"position:relative;\"><a href=\"#dataset\" aria-label=\"dataset permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSet</h1>\n<p>An abstract data source warehouse, similar to the concept of a table in a back-end database. Closely related to the DataSet is its constructed Field (field object) and Record (record object). Field corresponds to the field configuration attributes stored in the \"table\"; Record corresponds to each record in the \"table\" query.</p>\n<p>A lot of basic and specific function code logic is encapsulated in the DataSet. Form verification, export, basic add, delete, modify, and check interface requests, etc., configure a line of code through attributes in one step, and communicate with the back-end through Transport custom processing. It also monitors events based on the observer mode to implement custom logic after the communication event is triggered.</p>\n<p>Understand the three object concepts of DataSet, Field, and Record, and clarify the requirements and the objects and methods that need to be operated under the usage scenario, so that you can use Pro components well.</p>\n<img src=\"https://hsop-image-host.fsh.bcebos.com/team/3/HSOP-BAIDU/18212b28e6e64a42903f4f2539d7e922@Dataset层级.png\" alt=\"DataSet层级关系.png\" width=\"600\">\n<h1 id=\"fields\" style=\"position:relative;\"><a href=\"#fields\" aria-label=\"fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Fields</h1>\n<p>When the DataSet is instantiated, the fields that need to be collected and converted are determined by the field configuration of fields, and the Fields(ObservableMap&#x3C;string, Field>) object in the DataSet instance is constructed, which stores the corresponding field object in each piece of data.</p>\n<p>After communicating with the backend to get the data, it further constructs a Record object according to the configuration and associates each piece of data.</p>\n<blockquote>\n<p>fields is one of the DataSet configuration attributes, and is an array of field attributes.</p>\n</blockquote>\n<h1 id=\"record\" style=\"position:relative;\"><a href=\"#record\" aria-label=\"record permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Record</h1>\n<p>The record stored in the DataSet data source can be understood as a record in the database. Combined with the mobx state management observer mode, operations modify the Record object, and the interface state is automatically updated in response. Conversely, the modification on the user interface, for example, using in-line editing to modify a row of data in the Table, actually corresponds to a piece of Record object information in the DataSet.</p>\n<p>In the next chapter, we will initialize a simplest DataSet and explain some of its commonly used properties.</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DataSet can be understood as a data warehouse that stores data and some behaviors, and the remaining components can be understood as containers that display behaviors based on data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The following are the core concepts involved in DataSet. Understanding the core objects and their previous relationships will help you better use the Pigtooth component, quickly start development, and improve development efficiency."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"dataset","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#dataset","ariaLabel":"dataset permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"DataSet"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"An abstract data source warehouse, similar to the concept of a table in a back-end database. Closely related to the DataSet is its constructed Field (field object) and Record (record object). Field corresponds to the field configuration attributes stored in the \"table\"; Record corresponds to each record in the \"table\" query."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A lot of basic and specific function code logic is encapsulated in the DataSet. Form verification, export, basic add, delete, modify, and check interface requests, etc., configure a line of code through attributes in one step, and communicate with the back-end through Transport custom processing. It also monitors events based on the observer mode to implement custom logic after the communication event is triggered."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Understand the three object concepts of DataSet, Field, and Record, and clarify the requirements and the objects and methods that need to be operated under the usage scenario, so that you can use Pro components well."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://hsop-image-host.fsh.bcebos.com/team/3/HSOP-BAIDU/18212b28e6e64a42903f4f2539d7e922@Dataset层级.png","alt":"DataSet层级关系.png","width":600},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"fields","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fields","ariaLabel":"fields permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Fields"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When the DataSet is instantiated, the fields that need to be collected and converted are determined by the field configuration of fields, and the Fields(ObservableMap<string, Field>) object in the DataSet instance is constructed, which stores the corresponding field object in each piece of data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"After communicating with the backend to get the data, it further constructs a Record object according to the configuration and associates each piece of data."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fields is one of the DataSet configuration attributes, and is an array of field attributes."}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"record","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#record","ariaLabel":"record permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"Record"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The record stored in the DataSet data source can be understood as a record in the database. Combined with the mobx state management observer mode, operations modify the Record object, and the interface state is automatically updated in response. Conversely, the modification on the user interface, for example, using in-line editing to modify a row of data in the Table, actually corresponds to a piece of Record object information in the DataSet."}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the next chapter, we will initialize a simplest DataSet and explain some of its commonly used properties."}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li><a href=\"/c7n-ui/en/tutorials/dataSet-guide/#dataset\">DataSet</a></li>\n<li><a href=\"/c7n-ui/en/tutorials/dataSet-guide/#fields\">Fields</a></li>\n<li><a href=\"/c7n-ui/en/tutorials/dataSet-guide/#record\">Record</a></li>\n</ul>","fields":{"slug":"/en/tutorials/dataSet-guide","readingTime":{"text":"2 min read","time":119100.00000000001}},"frontmatter":{"title":"What is DataSet"},"parent":{"__typename":"File","relativePath":"dataSet-guide.en.md"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/en/tutorials/introduction"},"frontmatter":{"title":"Choerodon UI getting started guide","order":0}}},{"node":{"fields":{"slug":"/zh/tutorials/introduction"},"frontmatter":{"title":"Choerodon UI 入门指南","order":0}}},{"node":{"fields":{"slug":"/zh/tutorials/demo-build"},"frontmatter":{"title":"Demo 界面搭建","order":1}}},{"node":{"fields":{"slug":"/en/tutorials/demo-build"},"frontmatter":{"title":"Demo interface construction","order":1}}},{"node":{"fields":{"slug":"/en/tutorials/dataSet-guide"},"frontmatter":{"title":"What is DataSet","order":2}}},{"node":{"fields":{"slug":"/zh/tutorials/dataSet-guide"},"frontmatter":{"title":"DataSet 是什么","order":2}}},{"node":{"fields":{"slug":"/zh/tutorials/basic"},"frontmatter":{"title":"DataSet 入门","order":3}}},{"node":{"fields":{"slug":"/en/tutorials/basic"},"frontmatter":{"title":"Getting started with DS","order":3}}},{"node":{"fields":{"slug":"/zh/tutorials/table"},"frontmatter":{"title":"开发体验 —— 最简 Table 实现","order":4}}},{"node":{"fields":{"slug":"/en/tutorials/table"},"frontmatter":{"title":"Development Experience-Simplest Table Implementation","order":4}}},{"node":{"fields":{"slug":"/en/tutorials/dataSet-more"},"frontmatter":{"title":"Detailed DataSet Object","order":5}}},{"node":{"fields":{"slug":"/zh/tutorials/dataSet-more"},"frontmatter":{"title":"DataSet 对象详解","order":5}}},{"node":{"fields":{"slug":"/en/tutorials/table-advance"},"frontmatter":{"title":"Table Advanced","order":6}}},{"node":{"fields":{"slug":"/zh/tutorials/table-advance"},"frontmatter":{"title":"Table 进阶","order":6}}},{"node":{"fields":{"slug":"/zh/tutorials/form"},"frontmatter":{"title":"Form","order":7}}},{"node":{"fields":{"slug":"/en/tutorials/form"},"frontmatter":{"title":"Form","order":7}}},{"node":{"fields":{"slug":"/en/tutorials/tree"},"frontmatter":{"title":"Tree","order":8}}},{"node":{"fields":{"slug":"/zh/tutorials/tree"},"frontmatter":{"title":"Tree","order":8}}},{"node":{"fields":{"slug":"/en/tutorials/select"},"frontmatter":{"title":"Select","order":9}}},{"node":{"fields":{"slug":"/zh/tutorials/select"},"frontmatter":{"title":"Select","order":9}}},{"node":{"fields":{"slug":"/zh/tutorials/lov"},"frontmatter":{"title":"Lov","order":10}}},{"node":{"fields":{"slug":"/en/tutorials/lov"},"frontmatter":{"title":"Lov","order":10}}},{"node":{"fields":{"slug":"/en/tutorials/codearea-theme"},"frontmatter":{"title":"CodeArea 主题资源引用","order":11}}},{"node":{"fields":{"slug":"/zh/tutorials/configure"},"frontmatter":{"title":"全局配置","order":11}}},{"node":{"fields":{"slug":"/zh/tutorials/codearea-theme"},"frontmatter":{"title":"CodeArea 主题资源引用","order":11}}},{"node":{"fields":{"slug":"/en/tutorials/configure"},"frontmatter":{"title":"全局配置","order":11}}},{"node":{"fields":{"slug":"/en/tutorials/namesake-property"},"frontmatter":{"title":"同名属性","order":13}}},{"node":{"fields":{"slug":"/zh/tutorials/namesake-property"},"frontmatter":{"title":"同名属性","order":13}}}]}},"pageContext":{}},"staticQueryHashes":["3000541721","3000541721","653731124"]}