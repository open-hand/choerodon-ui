{"componentChunkName":"component---antv-gatsby-theme-antv-site-templates-tutorial-tsx","path":"/zh/tutorials/basic","result":{"data":{"site":{"siteMetadata":{"title":"Choerodon UI","githubUrl":"https://github.com/open-hand/choerodon-ui","tutorials":[]},"pathPrefix":"/c7n-ui"},"markdownRemark":{"html":"<p>上一章介绍 DataSet 是抽象的数据源仓库，类似于后端数据库中表的概念。</p>\n<p>DataSet 中具有专门抽象 API 的相关体系，使用它并不需要针对现有的后端体系进行大幅改造，只需要针对后端接口，进行对应的编码即可。</p>\n<p>本章结合接口数据，带大家创建一个简单的 DataSet 对象。</p>\n<h1 id=\"接口数据\" style=\"position:relative;\"><a href=\"#%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE\" aria-label=\"接口数据 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>接口数据</h1>\n<p>后端有一套类似这样的数据结构，返回以下数据：</p>\n<img src=\"https://file.open.hand-china.com/hsop-image-host/team/3/6d0173d3560a4771a6f11850a40789fa@y4.png\" alt=\"后端数据.png\" width=\"600\">\n<p>被托管在了这样一个接口地址上</p>\n<blockquote>\n<p><a href=\"https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/guide/user\" target=\"_self\" rel=\"nofollow\">mock 接口地址</a></p>\n</blockquote>\n<img src=\"https://file.open.hand-china.com/hsop-image-host/team/3/f6b74bf5b2a54367bd968675b19e8c8c@y5.png\" alt=\"mock-address.png\"  width=\"600\">\n<h1 id=\"dataset-构造\" style=\"position:relative;\"><a href=\"#dataset-%E6%9E%84%E9%80%A0\" aria-label=\"dataset 构造 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataSet 构造</h1>\n<p>分析接口信息，如果我们需要构建 DataSet 进行数据管理及使用 Pro 组件，可以这样写：</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">import { DataSet } from &#39;choerodon-ui/pro&#39;;\nconst userDS = new DataSet({\n    // 指定 DataSet 初始化后自动查询\n    autoQuery: true,\n    // 请求分页大小\n    pageSize: 8,\n    // 主键字段名，一般用作级联行表的查询字段\n    primaryKey: &#39;id&#39;,\n    // 对应后端接口，自动生成约定的 submitUrl, queryUrl...\n    name: &#39;user&#39;,\n    // 数据对象名，默认值 &#39;rows&#39;\n    dataKey: &#39;content&#39;,\n    // DataSet 中包含的字段，对应上述后端数据中每条记录中的字段\n    fields: [\n        { name: &#39;id&#39;, type: &#39;number&#39; },\n        { name: &#39;name&#39;, type: &#39;string&#39;, label: &#39;姓名&#39; },\n        { name: &#39;code&#39;, type: &#39;string&#39;, label: &#39;编码&#39; },\n        { name: &#39;sex&#39;, type: &#39;string&#39;, label: &#39;性别&#39;, lookupUrl: &#39;https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/EMPLOYEE_GENDER&#39; },\n        { name: &#39;active&#39;, label: &#39;状态&#39;, type: &#39;boolean&#39; },\n    ],\n    // 接口自定义配置\n    transport: {\n        // 查询请求的 axios 配置或 url 字符串\n        read: {\n            url: &#39;https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/guide/user&#39;,\n            method: &#39;GET&#39;,\n        }\n    },\n    // DS 事件回调\n    events: {\n        load: ({ dataSet }) =&gt; {\n            console.log(&#39;加载完成&#39;, dataSet)\n        }\n    }\n})</code></pre></div>\n<p>这样我们就创建好了一个基本的 DataSet 对象，以下对其配置中重点属性做解释说明。</p>\n<blockquote>\n<p>更多配置 API 文档，参考<a href=\"/c7n-ui/zh/procmp/dataset/dataset\"> DataSet</a>。</p>\n</blockquote>\n<h2 id=\"fields\" style=\"position:relative;\"><a href=\"#fields\" aria-label=\"fields permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>fields</h2>\n<p><a href=\"/c7n-ui/zh/procmp/dataset/dataset#field-props\">fields</a>，顾名思义，是类似于后端 SQL 数据表中的字段属性。这里负责的是将后端传回的数据收集进入 DataSet  中，将其变成 DataSet 可以监听到的数据。</p>\n<p>fields 会是一个数组，因为一个接口的字段总是能对应多个的。内部的 name 负责标明需要收集并转换的字段名（对象中的 key），而 type 负责的是将收集到的信息进行对应的类型转换。</p>\n<p>这样处理过的 DataSet（new 实例化后），就会将所有的后端数据对应转换成 DataSet 中存储的字段对象，同时利用观察者模式做到了视图与数据的同步更新。</p>\n<h2 id=\"transport\" style=\"position:relative;\"><a href=\"#transport\" aria-label=\"transport permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>transport</h2>\n<p><a href=\"/c7n-ui/zh/procmp/dataset/dataset#transport\">transport</a>这个属性用于处理自定义接口，DataSet 为 RESTful 场景事先准备了 CRUD 方法，上例我们用到的是 read 方法，即读取方法，查询数据接口。</p>\n<p>每个 transport 内部的方法均接收一个 AxiosConfig，这里我们用到的是 url  和 method。在接下来的章节中我们会详细介绍<a href=\"/c7n-ui/zh/procmp/dataset/dataset#transport\">transport</a>。</p>\n<h2 id=\"events\" style=\"position:relative;\"><a href=\"#events\" aria-label=\"events permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>events</h2>\n<p><a href=\"/c7n-ui/zh/procmp/dataset/dataset#dataset-events\">events</a>是 DataSet 在完成一些操作后会调用的回调函数，例如 update 方法就会在 record 对象值更新后调用，这里我们观察的事件是 load - 数据加载完后事件。那么会在 read 方法执行完毕，并返回数据后触发，这里我们使用 console.log 打印加载完成，实际开发场景就可以在此事件中提前处理返回的数据，操作 DataSet 对象。</p>\n<p>下一章节我们会利用本章创建的 DataSet 体验一下 Pro 开发 —— 最简 Table 实现。</p>","htmlAst":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"上一章介绍 DataSet 是抽象的数据源仓库，类似于后端数据库中表的概念。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"DataSet 中具有专门抽象 API 的相关体系，使用它并不需要针对现有的后端体系进行大幅改造，只需要针对后端接口，进行对应的编码即可。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本章结合接口数据，带大家创建一个简单的 DataSet 对象。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"接口数据","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE","ariaLabel":"接口数据 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"接口数据"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"后端有一套类似这样的数据结构，返回以下数据："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://file.open.hand-china.com/hsop-image-host/team/3/6d0173d3560a4771a6f11850a40789fa@y4.png","alt":"后端数据.png","width":600},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"被托管在了这样一个接口地址上"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/guide/user","target":"_self","rel":["nofollow"]},"children":[{"type":"text","value":"mock 接口地址"}]}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"img","properties":{"src":"https://file.open.hand-china.com/hsop-image-host/team/3/f6b74bf5b2a54367bd968675b19e8c8c@y5.png","alt":"mock-address.png","width":600},"children":[]},{"type":"text","value":"\n"},{"type":"element","tagName":"h1","properties":{"id":"dataset-构造","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#dataset-%E6%9E%84%E9%80%A0","ariaLabel":"dataset 构造 permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"DataSet 构造"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"分析接口信息，如果我们需要构建 DataSet 进行数据管理及使用 Pro 组件，可以这样写："}]},{"type":"text","value":"\n"},{"type":"element","tagName":"div","properties":{"className":["gatsby-highlight"],"dataLanguage":"plain"},"children":[{"type":"element","tagName":"pre","properties":{"className":["language-plain"]},"children":[{"type":"element","tagName":"code","properties":{"className":["language-plain"]},"children":[{"type":"text","value":"import { DataSet } from 'choerodon-ui/pro';\nconst userDS = new DataSet({\n    // 指定 DataSet 初始化后自动查询\n    autoQuery: true,\n    // 请求分页大小\n    pageSize: 8,\n    // 主键字段名，一般用作级联行表的查询字段\n    primaryKey: 'id',\n    // 对应后端接口，自动生成约定的 submitUrl, queryUrl...\n    name: 'user',\n    // 数据对象名，默认值 'rows'\n    dataKey: 'content',\n    // DataSet 中包含的字段，对应上述后端数据中每条记录中的字段\n    fields: [\n        { name: 'id', type: 'number' },\n        { name: 'name', type: 'string', label: '姓名' },\n        { name: 'code', type: 'string', label: '编码' },\n        { name: 'sex', type: 'string', label: '性别', lookupUrl: 'https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/EMPLOYEE_GENDER' },\n        { name: 'active', label: '状态', type: 'boolean' },\n    ],\n    // 接口自定义配置\n    transport: {\n        // 查询请求的 axios 配置或 url 字符串\n        read: {\n            url: 'https://www.fastmock.site/mock/423302b318dd24f1712751d9bfc1cbbc/mock/guide/user',\n            method: 'GET',\n        }\n    },\n    // DS 事件回调\n    events: {\n        load: ({ dataSet }) => {\n            console.log('加载完成', dataSet)\n        }\n    }\n})"}]}]}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这样我们就创建好了一个基本的 DataSet 对象，以下对其配置中重点属性做解释说明。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"更多配置 API 文档，参考"},{"type":"element","tagName":"a","properties":{"href":"/c7n-ui/zh/procmp/dataset/dataset"},"children":[{"type":"text","value":" DataSet"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"fields","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#fields","ariaLabel":"fields permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"fields"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"/c7n-ui/zh/procmp/dataset/dataset#field-props"},"children":[{"type":"text","value":"fields"}]},{"type":"text","value":"，顾名思义，是类似于后端 SQL 数据表中的字段属性。这里负责的是将后端传回的数据收集进入 DataSet  中，将其变成 DataSet 可以监听到的数据。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"fields 会是一个数组，因为一个接口的字段总是能对应多个的。内部的 name 负责标明需要收集并转换的字段名（对象中的 key），而 type 负责的是将收集到的信息进行对应的类型转换。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这样处理过的 DataSet（new 实例化后），就会将所有的后端数据对应转换成 DataSet 中存储的字段对象，同时利用观察者模式做到了视图与数据的同步更新。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"transport","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#transport","ariaLabel":"transport permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"transport"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"/c7n-ui/zh/procmp/dataset/dataset#transport"},"children":[{"type":"text","value":"transport"}]},{"type":"text","value":"这个属性用于处理自定义接口，DataSet 为 RESTful 场景事先准备了 CRUD 方法，上例我们用到的是 read 方法，即读取方法，查询数据接口。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"每个 transport 内部的方法均接收一个 AxiosConfig，这里我们用到的是 url  和 method。在接下来的章节中我们会详细介绍"},{"type":"element","tagName":"a","properties":{"href":"/c7n-ui/zh/procmp/dataset/dataset#transport"},"children":[{"type":"text","value":"transport"}]},{"type":"text","value":"。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{"id":"events","style":"position:relative;"},"children":[{"type":"element","tagName":"a","properties":{"href":"#events","ariaLabel":"events permalink","className":["anchor","before"]},"children":[{"type":"element","tagName":"svg","properties":{"ariaHidden":"true","focusable":"false","height":"16","version":"1.1","viewBox":"0 0 16 16","width":"16"},"children":[{"type":"element","tagName":"path","properties":{"fillRule":"evenodd","d":"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"},"children":[]}]}]},{"type":"text","value":"events"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"/c7n-ui/zh/procmp/dataset/dataset#dataset-events"},"children":[{"type":"text","value":"events"}]},{"type":"text","value":"是 DataSet 在完成一些操作后会调用的回调函数，例如 update 方法就会在 record 对象值更新后调用，这里我们观察的事件是 load - 数据加载完后事件。那么会在 read 方法执行完毕，并返回数据后触发，这里我们使用 console.log 打印加载完成，实际开发场景就可以在此事件中提前处理返回的数据，操作 DataSet 对象。"}]},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下一章节我们会利用本章创建的 DataSet 体验一下 Pro 开发 —— 最简 Table 实现。"}]}],"data":{"quirksMode":false}},"tableOfContents":"<ul>\n<li><a href=\"/c7n-ui/zh/tutorials/basic/#%E6%8E%A5%E5%8F%A3%E6%95%B0%E6%8D%AE\">接口数据</a></li>\n<li>\n<p><a href=\"/c7n-ui/zh/tutorials/basic/#dataset-%E6%9E%84%E9%80%A0\">DataSet 构造</a></p>\n<ul>\n<li><a href=\"/c7n-ui/zh/tutorials/basic/#fields\">fields</a></li>\n<li><a href=\"/c7n-ui/zh/tutorials/basic/#transport\">transport</a></li>\n<li><a href=\"/c7n-ui/zh/tutorials/basic/#events\">events</a></li>\n</ul>\n</li>\n</ul>","fields":{"slug":"/zh/tutorials/basic","readingTime":{"text":"2 min read","time":67200}},"frontmatter":{"title":"DataSet 入门"},"parent":{"__typename":"File","relativePath":"basic.zh.md"}},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/en/tutorials/introduction"},"frontmatter":{"title":"Choerodon UI getting started guide","order":0}}},{"node":{"fields":{"slug":"/zh/tutorials/introduction"},"frontmatter":{"title":"Choerodon UI 入门指南","order":0}}},{"node":{"fields":{"slug":"/zh/tutorials/demo-build"},"frontmatter":{"title":"Demo 界面搭建","order":1}}},{"node":{"fields":{"slug":"/en/tutorials/demo-build"},"frontmatter":{"title":"Demo interface construction","order":1}}},{"node":{"fields":{"slug":"/en/tutorials/dataSet-guide"},"frontmatter":{"title":"What is DataSet","order":2}}},{"node":{"fields":{"slug":"/zh/tutorials/dataSet-guide"},"frontmatter":{"title":"DataSet 是什么","order":2}}},{"node":{"fields":{"slug":"/zh/tutorials/basic"},"frontmatter":{"title":"DataSet 入门","order":3}}},{"node":{"fields":{"slug":"/en/tutorials/basic"},"frontmatter":{"title":"Getting started with DS","order":3}}},{"node":{"fields":{"slug":"/zh/tutorials/table"},"frontmatter":{"title":"开发体验 —— 最简 Table 实现","order":4}}},{"node":{"fields":{"slug":"/en/tutorials/table"},"frontmatter":{"title":"Development Experience-Simplest Table Implementation","order":4}}},{"node":{"fields":{"slug":"/en/tutorials/dataSet-more"},"frontmatter":{"title":"Detailed DataSet Object","order":5}}},{"node":{"fields":{"slug":"/zh/tutorials/dataSet-more"},"frontmatter":{"title":"DataSet 对象详解","order":5}}},{"node":{"fields":{"slug":"/en/tutorials/table-advance"},"frontmatter":{"title":"Table Advanced","order":6}}},{"node":{"fields":{"slug":"/zh/tutorials/table-advance"},"frontmatter":{"title":"Table 进阶","order":6}}},{"node":{"fields":{"slug":"/zh/tutorials/form"},"frontmatter":{"title":"Form","order":7}}},{"node":{"fields":{"slug":"/en/tutorials/form"},"frontmatter":{"title":"Form","order":7}}},{"node":{"fields":{"slug":"/en/tutorials/tree"},"frontmatter":{"title":"Tree","order":8}}},{"node":{"fields":{"slug":"/zh/tutorials/tree"},"frontmatter":{"title":"Tree","order":8}}},{"node":{"fields":{"slug":"/en/tutorials/select"},"frontmatter":{"title":"Select","order":9}}},{"node":{"fields":{"slug":"/zh/tutorials/select"},"frontmatter":{"title":"Select","order":9}}},{"node":{"fields":{"slug":"/zh/tutorials/lov"},"frontmatter":{"title":"Lov","order":10}}},{"node":{"fields":{"slug":"/en/tutorials/lov"},"frontmatter":{"title":"Lov","order":10}}},{"node":{"fields":{"slug":"/en/tutorials/codearea-theme"},"frontmatter":{"title":"CodeArea 主题资源引用","order":11}}},{"node":{"fields":{"slug":"/zh/tutorials/configure"},"frontmatter":{"title":"全局配置","order":11}}},{"node":{"fields":{"slug":"/zh/tutorials/codearea-theme"},"frontmatter":{"title":"CodeArea 主题资源引用","order":11}}},{"node":{"fields":{"slug":"/en/tutorials/configure"},"frontmatter":{"title":"全局配置","order":11}}},{"node":{"fields":{"slug":"/en/tutorials/namesake-property"},"frontmatter":{"title":"同名属性","order":13}}},{"node":{"fields":{"slug":"/zh/tutorials/namesake-property"},"frontmatter":{"title":"同名属性","order":13}}}]}},"pageContext":{}},"staticQueryHashes":["3000541721","3000541721","653731124"]}